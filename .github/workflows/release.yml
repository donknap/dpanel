name: release
permissions: write-all
on:
  push:
    tags:
    - 'v*'
jobs:
  build:
    strategy:
      matrix:
        platform: [ ubuntu-latest]
        go-version: [ '1.23' ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Test Env
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"
          echo "Tag name from github.ref: ${{  github.ref }}"
          echo "Runs name: ${{runner.os}}"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.MY_GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: |
          go get .
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to ALiYun
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_TOKEN }}
      - name: Build
        run: |
          VERSION_TAG=${GITHUB_REF_NAME#v}
          
          make clean-source 
          make build PROJECT_NAME=dpanel-amd64 CGO_ENABLED=1 VERSION=${VERSION_TAG}
          
          # arm64
          curl -Lo arm64.tar.xz https://github.com/donknap/dpanel/releases/download/toolchains-v1/arm64.tar.xz
          tar -xf arm64.tar.xz
          make build PROJECT_NAME=dpanel-arm64 CGO_ENABLED=1 VERSION=${VERSION_TAG} GOARM=7 GOARCH=arm64 GOOS=linux \
          CC=${PWD}/arm-gnu-toolchain-13.3.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc \
          CXX=${PWD}/arm-gnu-toolchain-13.3.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++

          # armv7
          curl -Lo arm.tar.xz https://github.com/donknap/dpanel/releases/download/toolchains-v1/arm.tar.xz
          tar -xf arm.tar.xz
          make build PROJECT_NAME=dpanel-arm CGO_ENABLED=1 VERSION=${VERSION_TAG} GOARM=7 GOARCH=arm GOOS=linux \
          CC=${PWD}/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-linux-gnueabihf/bin/arm-none-linux-gnueabihf-gcc \
          CXX=${PWD}/arm-gnu-toolchain-13.3.rel1-x86_64-arm-none-linux-gnueabihf/bin/arm-none-linux-gnueabihf-g++
          
          # amd64-musl
          curl -Lo amd64-musl.tgz https://github.com/donknap/dpanel/releases/download/toolchains-v1/amd64-musl.tgz
          tar xzf amd64-musl.tgz
          make build PROJECT_NAME=dpanel-ce-musl-amd64 CGO_ENABLED=1 VERSION=${VERSION_TAG}  \
          CC=${PWD}/x86_64-linux-musl-cross/bin/x86_64-linux-musl-gcc \
          CXX=${PWD}/x86_64-linux-musl-cross/bin/x86_64-linux-musl-g++
          
          make build PROJECT_NAME=dpanel-pe-musl-amd64 CGO_ENABLED=1 VERSION=${VERSION_TAG} FAMILY=pe  \
          CC=${PWD}/x86_64-linux-musl-cross/bin/x86_64-linux-musl-gcc \
          CXX=${PWD}/x86_64-linux-musl-cross/bin/x86_64-linux-musl-g++
          
          # arm64-musl
          curl -Lo arm64-musl.tgz https://github.com/donknap/dpanel/releases/download/toolchains-v1/arm64-musl.tgz
          tar xzf arm64-musl.tgz
          make build PROJECT_NAME=dpanel-ce-musl-arm64 CGO_ENABLED=1 VERSION=${VERSION_TAG}  GOARM=7 GOARCH=arm64 GOOS=linux  \
          CC=${PWD}/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc \
          CXX=${PWD}/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++
          
          make build PROJECT_NAME=dpanel-pe-musl-arm64 CGO_ENABLED=1 VERSION=${VERSION_TAG} FAMILY=pe  GOARM=7 GOARCH=arm64 GOOS=linux  \
          CC=${PWD}/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc \
          CXX=${PWD}/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++
          
          # arm-musl 
          curl -Lo arm-musl.tgz https://github.com/donknap/dpanel/releases/download/toolchains-v1/arm-musl.tgz
          tar zxf arm-musl.tgz
          make build PROJECT_NAME=dpanel-ce-musl-arm CGO_ENABLED=1 VERSION=${VERSION_TAG}  GOARM=7 GOARCH=arm GOOS=linux \
          CC=${PWD}/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-gcc \
          CXX=${PWD}/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-g++
          
          make build PROJECT_NAME=dpanel-pe-musl-arm CGO_ENABLED=1 VERSION=${VERSION_TAG} FAMILY=pe  GOARM=7 GOARCH=arm GOOS=linux \
          CC=${PWD}/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-gcc \
          CXX=${PWD}/arm-linux-musleabihf-cross/bin/arm-linux-musleabihf-g++
          
          # 群辉 arm
          curl -Lo armv8-synology.txz https://github.com/donknap/dpanel/releases/download/toolchains-v1/armv8-synology.txz
          tar -Jvxf armv8-synology.txz
          make build PROJECT_NAME=dpanel-synology-arm64 CGO_ENABLED=1 VERSION=${VERSION_TAG}  GOARM=7 GOARCH=arm64 GOOS=linux \
          CC=${PWD}/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc \
          CXX=${PWD}/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-g++
          
          # 群辉 amd64
          curl -Lo amd64-synology.txz https://github.com/donknap/dpanel/releases/download/toolchains-v1/amd64-synology.txz
          tar -Jvxf amd64-synology.txz
          make build PROJECT_NAME=dpanel-synology-amd64 CGO_ENABLED=1 VERSION=${VERSION_TAG} \
          CC=${PWD}/x86_64-pc-linux-gnu/bin/x86_64-pc-linux-gnu-gcc \
          CXX=${PWD}/x86_64-pc-linux-gnu/bin/x86_64-pc-linux-gnu-g++

      - name: Docker BuildX
        run: |
          VERSION_TAG=${GITHUB_REF_NAME#v}
          VERSION_GROUP_TAG=${VERSION_TAG%.*.*}

          docker buildx build \
          -t dpanel/dpanel:latest \
          -t dpanel/dpanel:${VERSION_TAG} \
          -t dpanel/dpanel:${VERSION_GROUP_TAG} \
          -t dpanel:latest \
          -t dpanel:${VERSION_TAG} \
          -t dpanel:${VERSION_GROUP_TAG} \
          --platform linux/arm64,linux/amd64 \
          --build-arg APP_VERSION=${VERSION_TAG} \
          --build-arg APP_FAMILY=ce \
          . --push

      - name: upload artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: runtime/*
          prerelease: false
  macos-build:
    strategy:
      matrix:
        platform: [ 'macos-13', 'macos-latest' ]
        go-version: [ '1.23' ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Test Env
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"
          echo "Tag name from github.ref: ${{  github.ref }}"
          echo "Runs name: ${{runner.os}}"
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: |
          go get .
      - name: Build
        run: |
          make clean-source 
          make build PROJECT_NAME=dpanel-darwin-${{runner.arch}} CGO_ENABLED=1
      - name: upload artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: runtime/*
          prerelease: false
  windows-build:
    strategy:
      matrix:
        platform: [ 'windows-latest' ]
        go-version: [ '1.23' ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Test Env
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"
          echo "Tag name from github.ref: ${{  github.ref }}"
          echo "Runs name: ${{runner.os}}"
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: |
          go get .
      - name: Build
        run: |
          set CGO_ENABLED=1
          go build -o runtime/dpanel.exe
      - name: upload artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: runtime/*
          prerelease: false
  xk-build:
    strategy:
      matrix:
        platform: [ 'ubuntu-latest' ]
        go-version: [ '1.23' ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Test Env
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"
          echo "Tag name from github.ref: ${{  github.ref }}"
          echo "Runs name: ${{runner.os}}"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.MY_GITHUB_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: |
          go get .
      - name: Build
        run: |
          VERSION_TAG=${GITHUB_REF_NAME#v}
          make -C app/pro/tests/xk_open clean libxksssopen.so
          make clean-source 
          make build PROJECT_NAME=dpanel-xk-amd64 FAMILY=xk CGO_ENABLED=1 VERSION=${VERSION_TAG}
      - name: upload artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: runtime/*
          prerelease: false